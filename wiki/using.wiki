#summary использование.

= Введение =

Данная статья рассказывает что нужно сделать чтобы записать во флэш-память платы AT91EB40 новый загрузчик.
Необходимость смены стандартного загрузчика появилась у меня после того как я попытался запустить [http://www.uclinux.org uClinux] на плате AT91EB40. Выяснилось, что оригинальный загрузчик (SRAM Downloader) не может загрузить код, объёмом более 65535 байт. Пришлось заняться модификацией исходного кода загрузчика. Результат и, возможно, развитие этой работы представлены здесь.

= Как записывать флэш-память AT91EB40 =

Если я правильно понял, Atmel предлагает, используя Angel debug monitor, записать в ОЗУ код для программирования флэш-памяти (Flash downloader), а затем этот код запишет во флэш то что вам нужно. То есть выглядеть это должно было так:
  # С помощью gdb-клиента соединяемся через RS-232 с Angel debug monitor (gdb сервером на плате).
  # Загружаем в ОЗУ платы elf-файл с кодом Flash downloader-а, при этом во время загрузки необходимо ещё как-то загрузить и собственно тот код, который нужно записать во флэш.
  # Запускаем программу записи.
Поскольку п.2 мне выполнить не удалось, я оставил идею с Flash downloader-ом и решил попробовать redboot:
http://ecos.sourceware.org/redboot/

Этот загрузчик способен загружать код как в ОЗУ так и во флэш. Однако уже скомпилированный код redboot для AT91EB40 так же имеет ограничения по объёму загружаемого кода. Этот объём не превышает 512к. Именно такой объём ОЗУ имеется на плате. Однако AT91EB40 допускает апгрейд ОЗУ вплоть до 2Мб что и необходимо для работы uClinux. Чтобы использовать redboot с таким объёмом нужно редактировать его исходные тексты и заново компилировать. Таким образом из двух зол было выбрано меньшее - редактировать загрузчик Atmel-а. К тому же версия redboot, работающая как и boot_eb40 из флэш, работает очень медленно. Образ uClinux загружается в ОЗУ около 6 часов! А версия, работающая из ОЗУ, совершенно естественно занимает место в ОЗУ, в отличии от boot_eb40.
В итоге, решено redboot использовать в качестве программатора флэш-памяти платы, чтобы с его помощью записать во флэш новый загрузчик boot_eb40. Для этого выполним следующую последовательность действий:

  # Забираем [http://ecos.sourceware.org/ecos/boards/redbootbins/at91eb40/redboot_RAM.elf отсюда] скомпилированный образ redboot
  # Переключатель SW1 на плате переводим в положение "LOWER MEM"
  # Соединяем разъём "SERIAL A" платы с портом RS-232 компьютера.
  # Включаем плату. Должен загореться жёлтый светодиод.
  # В консоле переходим в директорию куда загрузили redboot_RAM.elf
  # Набираем в консоле:
{{{
$ arm-elf-gdb redboot_RAM.elf
...выводится информация о gdb-клиенте
(gdb) tar rdi /dev/ttyS0
Angel Debug Monitor (serial) 1.04 (Advanced RISC Machines SDT 2.5) for
AT91EB40 (2.00)
Angel Debug Monitor rebuilt on Apr 07 2000 at 12:40:31
Serial Rate:   9600
Connected to ARM RDI target.
(gdb) set $cpsr=0xd3
(gdb) load
Loading section .rom_vectors, size 0x40 lma 0x2020000
Loading section .text, size 0x7fd8 lma 0x2020040
Loading section .rodata, size 0x15a0 lma 0x2028018
Loading section .data, size 0x2e4 lma 0x20295b8
Start address 0x2020040 , load size 39068
Transfer rate: 6250 bits/sec, 500 bytes/write.
(gdb) cont
Continuing.
...redboot загружен и работает
}}}
  # Нажимаем Ctrl-Z и выходим из gdb.
Далее общение с загрузчиком redboot должно происходить с помощью любой терминальной программы. Я использовал minicom. Передача файла с кодом для записи во флеш происходит по протоколу ymodem. Поэтому кроме minicom следует установить утилиты для передачи файлов по этому протоколу. Скорость обмена по RS-232 должна быть установлена в 38400 б/с. Кол-во бит - 8, 1 стоп бит, контроля чётности нет, аппаратного управления потоком нет, программного управления потоком нет. После того как minicom проинициализирует COM порт нажмите <ввод> - Появится командная строка redboot:
{{{
redboot>
}}}
Введите команду version:
{{{
redboot> version
}}}
Redboot выведет информацию о версии ПО и адреса доступной памяти RAM и ROM:
{{{
RedBoot(tm) bootstrap and debug environment [RAM]
Non-certified release, version UNKNOWN - built 14:09:27, Jul 20 2001

Platform: Atmel AT91/EB40 (ARM7TDMI)
Copyright (C) 2000, 2001, Free Software Foundation, Inc.

RAM: 0x02000000-0x02080000, 0x0202d9f8-0x0207fd00 available
FLASH: 0x01010000 - 0x01020000, 256 blocks of 0x00000100 bytes each.

RedBoot>
}}}
Запомните стартовый адрес доступной памяти RAM (в нашем случае это 0x0202d9f8) и FLASH - 0x01010000

Загружаем файл для прошивки во флэш в ОЗУ, начиная с начального адреса доступной памяти:
{{{
RedBoot> load -m ymodem -b 0x0202d9f8
}}}
После этого redboot переходит в режим ожидания передачи файла с компьютера. В minicom нажимаем Ctrl-A-S, выбираем протокол передачи ymodem, потом выбираем файл для прошивки (должен быть в формате srec). В нашем случае это boot_eb40.srec Этот файл должен появиться после компиляции boot_eb40 если вы ничего не меняли в Makefile. Начинается передача. После её окончания записываем содержимое ОЗУ во флеш:
{{{
RedBoot> fi wr -f 0x01010000 -b 0x0202d9f8 -l 0xe100
}}}
Всё. Новый загрузчик записан во флеш. Чтобы он стартовал при включении платы, переведите переключатель SW1 в положение "UPPER MEM".